/**
 * @fileOverview 工具类
 * @author suzy
 * @version 2.0
 */
;
(function (window) {
    var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    /**
     * @function trim
     * @param {string} 需要清理空格字符串
     * @return {string} 转换完成字符串
     * @description 字符串方法拓展，清除字符串里的空格
     * @example var testStr = "test test2 ".trim();
     */
    String.prototype.trim = function () {
        return this.replace(/<\/?.+?>/g, "").replace(/[\r\n]/g, "").replace(/(^\s*)|(\s*$)/g, "");
    }


    /**
     * @function jsonTrim
     * @param {string} 需要过滤特殊字符json字符串
     * @return {string} 过滤完成字符串
     * @description 字符串方法拓展，过滤json字符串里特殊字符
     * @example var testStr = "{\"content\":\"test2 \n \r \"}".jsonTrim();
     */
    String.prototype.jsonTrim = function () {
        return this.replace(/\r/g, ' ').replace(/\n/g, ' ');
    }

    /**
     * @function replaceAll
     * @param {string} s1 被替换原始字符串
     * @param {string} s2 替换字符串
     * @return {string} 替换完毕字符串
     * @description 字符串方法拓展，批量替换字符串
     * @example var testStr = "content com".replaceAll("co","test");
     */
    String.prototype.replaceAll = function (s1, s2) {
        return this.replace(new RegExp(s1, "gm"), s2);
    }

    /**
     * @class UtilObj
     * @constructor
     * @author suzy
     * @description 工具类;由于本类加入命名空间XEpg
     * @example UtilObj;
     * @since version 2.0
     */
    var UtilObj = {
        /**
         * @function createJsonp
         * @param {string} id 自动创建script的id
         * @param {string} url 请求地址
         * @description jsonp请求创建
         * @example XEpg.Util.createJsonp("jsonp1","test.htm");
         */
        createJsonp: function (id, url) {
            var eleScript = document.createElement("script");
            eleScript.type = "text/javascript";
            eleScript.id = id;
            eleScript.src = url;
            document.getElementsByTagName("HEAD")[0].appendChild(eleScript);
        },

        /**
         * @function createJsonp
         * @param {string} id 自动创建script的id
         * @description jsonp script移除，对不适用的json进行清理，减少资源占用,需要与createJsonp 一一对应
         * @example XEpg.Util.deleteJsonp("jsonp1");
         */
        deleteJsonp: function (id) {
            var tempObj = document.getElementById(id);
            document.head.removeChild(tempObj);
        },

        /**
         * @function jsonTrim
         * @param {string} str 待替换字符串
         * @description 清除字符串里的换行与回车
         * @example XEpg.Util.jsonTrim("test \n str");
         */
        jsonTrim: function (str) {
            return str.replace(/\r/g, ' ').replace(/\n/g, ' ');
        },

        /**
         * @function isArray
         * @param {object} obj 待判断对象
         * @description 判断对象是否为数组
         * @example XEpg.Util.isArray([1,2]);
         */
        isArray: function (obj) {
            var isArr = Object.prototype.toString.call(obj) === '[object Array]';
            //兼容ipanel低端盒子
            if (!isArr && obj != null) {
                isArr = obj.constructor == Array;
            }
            return isArr;
        },
        /**
         * @function argumentsToArray
         * @param {object} setObj arguments参数对象
         * @description 参数对象转数组
         * @example XEpg.Util.argumentsToArray(arguments);
         */
        argumentsToArray: function (setObj) {
            var tempArray = [];
            //如果传的是个数组，则直接数组赋值
            if (setObj.length == 1 && XEpg.Util.isArray(setObj[0])) {
                tempArray = setObj[0];
            } else {
                for (var i = 0, len = setObj.length; i < len; i++) {
                    if (typeof (setObj[i]) == "object" && setObj[i] != null) {
                        tempArray.push(setObj[i]);
                    }
                }
            }
            //如果没有参数，则为null
            if (tempArray.length == 0)
                tempArray = null;
            return tempArray;
        },

        /**
         * @function setCookie
         * @param {string} key 关键字，需唯一
         * @param {string} val 值
         * @description 设置cookie
         * @example XEpg.Util.setCookie("testCookie1","p1=a&p2=b");
         */
        setCookie: function (key, val) {
            var Days = 7; //此 cookie 将被保存 7 天
            var exp = new Date();    //new Date("December 31, 9998");
            // exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
            // document.getElementById("date").innerHTML = "9:" + key + ":" + val;
            // document.cookie = key + "=" + escape(val) + ";expires=" + exp.toGMTString() + ";path=/";
            document.cookie = key + "=" + escape(val) + ";path=/";
            // document.getElementById("date").innerHTML = "10:";
        },

        /**
         * @function getCookie
         * @param {string} key 关键字，需唯一,与setCookie对应
         * @return {string} 值
         * @description 获取cookie存储的值
         * @example XEpg.Util.getCookie("testCookie1");
         */
        getCookie: function (key) {
            var arr = null;
            if (document.cookie != null && document.cookie.length > 0)
                arr = document.cookie.match(new RegExp("(^| )" + key + "=([^;]*)(;|$)"));
            if (arr != null)
                return unescape(arr[2]);
            return null;
        },

        /**
         * @function delCookie
         * @param {string} key 关键字，需唯一,与setCookie对应
         * @description 删除cookie
         * @example XEpg.Util.delCookie("testCookie1");
         */
        delCookie: function (key) {
            //为了删除指定名称的cookie，可以将其过期时间设定为一个过去的时间
            var date = new Date();
            date.setTime(date.getTime() - 10000);
            document.cookie = key + "=;expires=" + date.toGMTString() + ";path=/";
        },

        /**
         * @function objectToStr
         * @param {object} jsonObj json对象
         * @return {string} 字符串
         * @description json对象转换为字符串
         * @example var str = XEpg.Util.objectToStr({"id":"3","name":"test"});
         */
        objectToStr: function (jsonObj) {
            var reStr = "";
            if (jsonObj != null && typeof (jsonObj) == "object") {
                var beginStr = "{";
                var endStr = "}";
                if (this.isArray(jsonObj)) {
                    beginStr = "[";
                    endStr = "]";
                }
                for (var item in jsonObj) {
                    //JSON 对象
                    if (!(item >= 0)) {
                        reStr += "'" + item + "':";
                    }
                    var type = typeof (jsonObj[item]);
                    if (type == "number") {
                        reStr += jsonObj[item];
                    } else if (type == "object") {
                        reStr += this.objectToStr(jsonObj[item]);
                    } else {
                        reStr += "'" + jsonObj[item] + "'";
                    }
                    reStr += ",";
                }
                if (reStr.length > 0)
                    reStr = reStr.substr(0, reStr.length - 1);
                reStr = beginStr + reStr + endStr;
            }
            return reStr;
        },

        /**
         * @function getStrRealLen
         * @param {string} str 字符串
         * @return {number} 字符长度
         * @description 获取字符串真实长度,中文字符算2长度
         * @example var str = XEpg.Util.getStrRealLen("test测试");
         */
        getStrRealLen: function (str) {
            if (typeof (str) != "string" || str.length == 0)
                return 0;
            var len = 0;
            var strLen = str.length;
            for (var i = 0; i < strLen; i++) {
                a = str.charAt(i);
                len++;
                if (escape(a).length > 4) {//中文字符的长度经编码之后大于4
                    len++;
                }
            }
            return len;
        },

        /**
         * @function getSubStr
         * @param {string} str 截取前字符串
         * @param {number} len 截取长度,中文字符算2长度
         * @param {boolean} isSuffix 是否加省略号，默认不加
         * @return {string} 截取后字符串
         * @description 截取字符串,中文字符算2长度
         * @example var str = XEpg.Util.getSubStr("test测试",6); //普通截取
         * @example var str = XEpg.Util.getSubStr("test测试",6,true); //截取后面加省略号
         */
        getSubStr: function (str, len, isSuffix) {
            if (typeof (str) != "string" || str.length == 0)
                return "";
            var realLen = this.getStrRealLen(str);
            if (realLen <= len) {
                return str;
            } else {
                var str_length = 0;
                var str_cut = new String();
                var str_len = str.length;
                if (isSuffix)
                    len -= 3;
                for (var i = 0; i < str_len; i++) {
                    var a = str.charAt(i);
                    str_length++;
                    if (escape(a).length > 4) {
                        //中文字符的长度经编码之后大于4
                        str_length++;
                    }
                    str_cut = str_cut.concat(a);
                    if (str_length >= len) {
                        if (isSuffix) {
                            str_cut = str_cut.concat("...");
                        }
                        return str_cut;
                    }
                }
                //如果给定字符串小于指定长度，则返回源字符串；
                if (str_length < len)
                    return str;
            }
        },

        /**
         * @function numSupplyZero
         * @param {string} initNumStr 初始化字符串
         * @param {string} numStr 需要格式化数字
         * @return {string} 格式化后字符串
         * @description 数字前面补0
         * @example var str = XEpg.Util.numSupplyZero("112","0000"); 结果为:0112
         */
        numSupplyZero: function (initNumStr, numStr) {
            var len = initNumStr.length;
            initNumStr = numStr + initNumStr;
            return initNumStr.substring(initNumStr.length - numStr.length);
        },

        /**
         * @function getPageTotal
         * @param {number} totalNum 总条数
         * @param {number} pageSize 每页条数
         * @return {number} 总页数
         * @description 根据总条数与每页条数，计算出总页数
         * @example XEpg.Util.getPageTotal(112,10);
         */
        getPageTotal: function (totalNum, pageSize) {
            return Math.ceil(parseInt(totalNum, 10) / parseInt(pageSize, 10));
        },

        /**
         * @function getSliceList
         * @param {array} objs 列表数组
         * @param {number} pageIndex 开始页
         * @param {number} pageSize 每页条数
         * @return {array} 本页数组
         * @description 根据数组开始页与每页条数，计算出当前页数组列表
         * @example XEpg.Util.getSliceList([1,3,5,6,8,9,7],2,3);
         */
        getSliceList: function (objs, pageIndex, pageSize) {
            var tempObj = objs;
            if (objs != null && typeof (objs) == "object" && objs.length > 0) {
                pageIndex = parseInt(pageIndex, 10);
                pageSize = parseInt(pageSize, 10);
                var len = objs.length;
                if (pageIndex > 0 && pageSize > 0 && len > 0) {
                    var begin = pageSize * (pageIndex - 1);
                    if (begin < 0)
                        begin = 0;
                    var end = pageSize * pageIndex;
                    if (end > len)
                        end = len;
                    tempObj = objs.slice(begin, end);
                }
            }
            return tempObj;
        },

        /**
         * @function replaceUrlParams
         * @param {string} url 地址
         * @param {string} key url参数关键字
         * @param {string|number} value 参数值
         * @return {string} 替换后地址
         * @description 替换地址里的参数值,如果地址里没有该参数，则再末尾补参数与值
         * @example XEpg.Util.replaceUrlParams("test.htm?a=cc&b=kk","a","oo");
         */
        replaceUrlParams: function (url, key, value) {
            var index = url.indexOf(key + "=");
            if (index > -1) {
                var before = url.substring(0, index);
                var after = url.substring(index);
                index = after.indexOf("&");
                after = (index > -1) ? after.substring(index) : "";
                url = before + key + "=" + value + after;
            } else {
                url += (url.indexOf("?") > -1) ? "&" : "?";
                url += key + "=" + value;
            }
            return url;
        },


        /**
         * @function getUrlParam
         * @param {string} strname url参数关键字
         * @param {string} url 地址
         * @return {string} 参数值
         * @description 获取URL地址中的参数值
         * @example XEpg.Util.getUrlParam("a","test.htm?a=cc&b=kk");
         */
        getUrlParam: function (strname, url) {
            var hrefstr, pos, parastr, para, tempstr;
            hrefstr = window.location.href;
            if (typeof (url) != "undefined")
                hrefstr = url;
            pos = hrefstr.indexOf("?");
            //没有参数，则直接跳出
            if (pos == -1 && hrefstr.indexOf("=") == -1)
                return null;
            parastr = decodeURI(hrefstr.substring(pos + 1));
            para = parastr.split("&");
            tempstr = "";
            for (i = 0; i < para.length; i++) {
                tempstr = para[i];
                pos = tempstr.indexOf("=");
                if (tempstr.substring(0, pos) == strname) {
                    var temppath = tempstr.substring(pos + 1);
                    return temppath;
                }
            }
            return null;
        },


        /**
         * @function getUrlParameterObj
         * @param {string} url 地址
         * @return {object} 参数对象
         * @description 获取记录地址里的参数对象
         * @example XEpg.Util.getUrlParameterObj("test.htm?a=cc&b=kk");  结果为 {"a":"cc","b":"kk"}
         */
        getUrlParameterObj: function (url) {
            if (typeof (url) == "undefined" || url == null)
                url = window.location.href;
            var pos = url.indexOf("?");
            var obj = null;
            //没有参数，则直接跳出
            if (pos == -1 && url.indexOf("=") == -1)
                return obj;
            var parastr = decodeURI(url.substring(pos + 1));
            var para = parastr.split("&");
            obj = {};
            for (i = 0; i < para.length; i++) {
                var tempstr = para[i];
                pos = tempstr.indexOf("=");
                obj[tempstr.substring(0, pos)] = tempstr.substring(pos + 1);
            }
            return obj;
        },

        parseJSON: function (data) {
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data + "");
            }
            var requireNonComma,
                depth = null,
                str = UtilObj.trim(data + "");
            //// after removing valid tokens
            return (Function("return " + str))();
            return str && !UtilObj.trim(str.replace(rvalidtokens, function (token, comma, open, close) {
                if (requireNonComma && comma) {
                    depth = 0;
                }
                if (depth === 0) {
                    return token;
                }
                requireNonComma = open || comma;
                depth += !close - !open;
                return "";
            })) ?
                (Function("return " + str))() :
                console.log("Invalid JSON: " + data);
        },
        trim: function (text) {
            return text == null ?
                "" :
                (text + "").replace(rtrim, "");
        },
        each: function (obj, callback) {
            var length, i = 0;

            if (obj && obj.length >= 0) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }

            return obj;
        },
        renderTpl: function (data, tpl) {
            var res = "";
            if (data && data.length) {//数组
                var temp = [];
                this.each(data, function (i) {
                    var item = data[i];
                    var s = tpl.replace(/\{\{(\w+)\}\}/g, function (all, key) {
                        return item[key] || "";
                    });
                    temp.push(s);
                });
                s = temp.join("");
            } else { //对象
                res = tpl.replace(/\{\{(\w+)\}\}/g, function (all, key) {
                    return data[key] || "";
                });
            }
            return res;
        }
    };

    //如果Epg类没有创建
    if (!(typeof (window["XEpg"]) == "object" && window["XEpg"] != null)) {
        window["XEpg"] = {};
    }

    //赋值让外部调用
    window["XEpg"].Util = UtilObj;

})(window);


;(function (window) {
    /** MD5 加密处理   开始*/
    var hex_chr = "0123456789abcdef";

    function rhex(num) {
        str = "";
        for (j = 0; j <= 3; j++) {
            str += hex_chr.charAt((num >> (j * 8 + 4)) & 15) + hex_chr.charAt((num >> (j * 8)) & 15);
        }
        return str;
    }

    function str2blks_MD5(str) {
        nblk = ((str.length + 8) >> 6) + 1;
        blks = new Array(nblk * 16);
        for (i = 0; i < nblk * 16; i++) {
            blks[i] = 0;
        }
        for (i = 0; i < str.length; i++) {
            blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
        }
        blks[i >> 2] |= 128 << ((i % 4) * 8);
        blks[nblk * 16 - 2] = str.length * 8;
        return blks;
    }

    function add(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 65535);
    }

    function rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }

    function cmn(q, a, b, x, s, t) {
        return add(rol(add(add(a, q), add(x, t)), s), b);
    }

    function ff(a, b, c, d, x, s, t) {
        return cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }

    function gg(a, b, c, d, x, s, t) {
        return cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }

    function hh(a, b, c, d, x, s, t) {
        return cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function ii(a, b, c, d, x, s, t) {
        return cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    function MD5(str) {
        x = str2blks_MD5(str);
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = ff(c, d, a, b, x[i + 10], 17, -42063);
            b = ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = hh(a, b, c, d, x[i + 5], 4, -378558);
            d = hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = add(a, olda);
            b = add(b, oldb);
            c = add(c, oldc);
            d = add(d, oldd);
        }
        return (rhex(a) + rhex(b) + rhex(c) + rhex(d)).toUpperCase();
    }

    window.MD5 = MD5;
    /** MD5 加密处理   结束*/
})(window);
